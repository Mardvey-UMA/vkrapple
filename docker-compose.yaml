services:
  # PostgreSQL
  postgres:
    image: postgres:16-alpine
    container_name: goods_db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: goods_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - '5432:5432'
    networks:
      - app-network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 5s
      timeout: 5s
      retries: 5

  # Elasticsearch
  elasticsearch:
    image: elasticsearch:8.17.1
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms2g -Xmx2g
      - xpack.security.enabled=true
      - ELASTIC_PASSWORD=elastic_password
      - bootstrap.memory_lock=true
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - '9200:9200'
      - '9300:9300'
    networks:
      - app-network
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'curl -u elastic:elastic_password -f http://localhost:9200/_cluster/health || exit 1',
        ]
      interval: 10s
      timeout: 30s
      retries: 10

  # Logstash
  logstash:
    image: logstash:8.17.1
    container_name: logstash
    depends_on:
      postgres:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    environment:
      LS_JAVA_OPTS: '-Xmx1g -Xms1g'
      ELASTICSEARCH_HOSTS: 'http://elasticsearch:9200'
      ELASTICSEARCH_USERNAME: 'elastic'
      ELASTICSEARCH_PASSWORD: 'elastic_password'
    volumes:
      - ./conf/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
      - ./conf/products_template.json:/usr/share/logstash/templates/products_template.json
      - ./conf/postgresql-42.6.0.jar:/usr/share/logstash/postgresql-42.6.0.jar
    networks:
      - app-network

  # Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://goods_db:5432/goods_db
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      SPRING_ELASTICSEARCH_URIS: http://elasticsearch:9200
      SPRING_ELASTICSEARCH_USERNAME: elastic
      SPRING_ELASTICSEARCH_PASSWORD: elastic_password
    ports:
      - '8080:8080'
    networks:
      - app-network

  # Telegram Bot
  telegram-bot:
    build:
      context: ./tg_bot
      dockerfile: Dockerfile
    depends_on:
      #- backend
      - postgres
    environment:
      DB_URL: postgresql://postgres:postgres@postgres:5432/goods_db
    networks:
      - app-network

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - '3000:3000'
    restart: always
    networks:
      - app-network

  # Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: nginx_proxy
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
      - /etc/letsencrypt:/etc/letsencrypt
    depends_on:
      - frontend
      - backend
    networks:
      - app-network
    healthcheck:
      test: ['CMD-SHELL', 'nc -z localhost 80 && nc -z localhost 443 || exit 1']
      interval: 30s
      timeout: 5s
      retries: 3

volumes:
  postgres_data:
  elasticsearch_data:
  letsencrypt:

networks:
  app-network:
    driver: bridge
