services:
  # PostgreSQL
  postgres:
    image: postgres:16-alpine
    container_name: goods_db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: goods_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - '5432:5432'
    networks:
      - app-network

  # MinIO
  minio:
    image: minio/minio
    command: server --certs-dir /certs /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
      MINIO_SERVER_URL: "https://www.ssushop.ru:9000"
    volumes:
      - ~/minio/certs:/certs
      - minio_data:/data
    ports:
      - '9000:9000'
      - '9001:9001'
    expose:
      - '9000'
      - '9001'
    networks:
      - app-network
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - '3000:3000'
    restart: unless-stopped
    networks:
      - app-network
  # Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    restart: unless-stopped
    depends_on:
      - postgres
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://goods_db:5432/goods_db
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
    ports:
      - '8080:8080'
    networks:
      - app-network

  # Frontend

  # Telegram Bot
  telegram-bot:
    build:
      context: ./tg_bot
      dockerfile: Dockerfile
    depends_on:
      - backend
      - postgres
    environment:
      DB_URL: postgresql://postgres:postgres@postgres:5432/goods_db
    networks:
      - app-network

  nginx:
    image: nginx:alpine
    container_name: nginx_proxy
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
      - /etc/letsencrypt:/etc/letsencrypt
    depends_on:
      - minio
      - frontend
      - backend
    networks:
      - app-network

volumes:
  postgres_data:
  minio_data:

networks:
  app-network:
    driver: bridge
