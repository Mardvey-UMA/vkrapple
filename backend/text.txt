```
package ru.webshop.backend.config

import org.springframework.context.annotation.Bean
import org.springframework.context.annotation.Configuration
import org.springframework.security.authentication.AuthenticationManager
import org.springframework.security.authentication.AuthenticationProvider
import org.springframework.security.authentication.dao.DaoAuthenticationProvider
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration
import org.springframework.security.core.userdetails.UserDetailsService
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder
import org.springframework.security.crypto.password.PasswordEncoder

@Configuration
class BeansConfig (
    val userDetailsService: UserDetailsService
){

    @Bean
    fun authenticationProvider(): AuthenticationProvider {
        val authProvider = DaoAuthenticationProvider()
        authProvider.setUserDetailsService(userDetailsService)
        authProvider.setPasswordEncoder(passwordEncoder())
        return authProvider
    }
    @Bean
    fun authenticationManager(
        config: AuthenticationConfiguration
    ) : AuthenticationManager =
        config.getAuthenticationManager()

    @Bean
    fun passwordEncoder(): PasswordEncoder = BCryptPasswordEncoder()
}

package ru.webshop.backend.config

import org.springframework.context.annotation.Bean
import org.springframework.context.annotation.Configuration
import org.springframework.web.cors.CorsConfiguration
import org.springframework.web.cors.CorsConfigurationSource
import org.springframework.web.cors.UrlBasedCorsConfigurationSource

@Configuration
class CorsConfig {
    @Bean
    fun corsConfigurationSource(): CorsConfigurationSource {
        val configuration = CorsConfiguration().apply {
            allowedOrigins = listOf("*")
            allowedMethods = listOf("GET", "POST", "PUT", "DELETE", "OPTIONS")
            allowedHeaders = listOf("*")
            exposedHeaders = listOf("X-Telegram-User-Id")
            allowCredentials = true
            maxAge = 3600
        }

        return UrlBasedCorsConfigurationSource().apply {
            registerCorsConfiguration("/**", configuration)
        }
    }
}

package ru.webshop.backend.config

import org.springframework.boot.context.properties.ConfigurationProperties
import org.springframework.stereotype.Component

@Component
@ConfigurationProperties(prefix = "spring.security.jwt")
class JwtConfig {
    lateinit var secretKey: String
    var expiration: Long = 0
    var refreshExpiration: Long = 0
}

package ru.webshop.backend.config

import org.springframework.boot.context.properties.ConfigurationProperties
import org.springframework.stereotype.Component

@Component
@ConfigurationProperties(prefix = "spring")
class PublicRoutersConfig {
    lateinit var publicUrls: List<String>
}

package ru.webshop.backend.config

import org.springframework.context.annotation.Bean
import org.springframework.context.annotation.Configuration
import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity
import org.springframework.security.config.annotation.web.builders.HttpSecurity
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity
import org.springframework.security.config.http.SessionCreationPolicy
import org.springframework.security.web.SecurityFilterChain
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter
import ru.webshop.backend.filters.TelegramHeaderFilter
import ru.webshop.backend.security.JwtFilter

@Configuration
@EnableWebSecurity
@EnableMethodSecurity
class SecurityConfig(
    private val jwtFilter: JwtFilter,
    private val telegramHeaderFilter: TelegramHeaderFilter,
    private val publicRoutersConfig: PublicRoutersConfig
) {

    @Bean
    fun securityFilterChain(http: HttpSecurity): SecurityFilterChain {
        http
            .csrf { it.disable() }
            .sessionManagement {
                it.sessionCreationPolicy(SessionCreationPolicy.STATELESS)
            }
            .authorizeHttpRequests { auth ->
                publicRoutersConfig.publicUrls.forEach { url ->
                    auth.requestMatchers(url).permitAll()
                }
                auth.anyRequest().authenticated()
            }
            .addFilterBefore(jwtFilter, UsernamePasswordAuthenticationFilter::class.java)
            .addFilterAfter(telegramHeaderFilter, JwtFilter::class.java)

        return http.build()
    }
}

package ru.webshop.backend.controller

import jakarta.servlet.http.HttpServletResponse
import jakarta.validation.Valid
import org.springframework.http.ResponseEntity
import org.springframework.web.bind.annotation.PostMapping
import org.springframework.web.bind.annotation.RequestBody
import org.springframework.web.bind.annotation.RequestHeader
import org.springframework.web.bind.annotation.RequestMapping
import org.springframework.web.bind.annotation.RestController
import ru.webshop.backend.dto.AuthResponseDTO
import ru.webshop.backend.service.interfaces.AuthenticationService

@RestController
@RequestMapping("/api/auth")
class AuthController(
    private val authenticationService: AuthenticationService
) {
    @PostMapping("/authenticate")
    fun authenticateUser(
        @RequestHeader("X-Telegram-Init-Data") webAppData: String ,
        response: HttpServletResponse
    ): ResponseEntity<AuthResponseDTO> {
        val authResponse = authenticationService.authenticate(webAppData, response)
        return ResponseEntity.ok(authResponse)
    }
}

package ru.webshop.backend.controller
import org.springframework.web.bind.annotation.*

import org.slf4j.LoggerFactory

@RestController
@RequestMapping("/api")
class UserController {

    private val logger = LoggerFactory.getLogger(UserController::class.java)

    @GetMapping("/me")
    fun getInfo(@RequestHeader("X-Telegram-User-Id") telegramId: Long): String {
        logger.info("ЗАПРОС")
        logger.info(telegramId.toString())
        return "User ID: $telegramId"
    }
}

package ru.webshop.backend.dto

import com.fasterxml.jackson.databind.PropertyNamingStrategies
import com.fasterxml.jackson.databind.annotation.JsonNaming
import java.time.Instant
import java.time.LocalDateTime

@JsonNaming(PropertyNamingStrategies.SnakeCaseStrategy::class)
data class AuthResponseDTO (
    var accessToken: String,
    var accessExpiresAt: LocalDateTime? = null,
    var issuedAt: LocalDateTime? = null,
    var refreshToken: String? = null,
    var refreshExpiresAt: LocalDateTime? = null,
)

package ru.webshop.backend.entity

import com.fasterxml.jackson.annotation.JsonIgnore
import jakarta.persistence.*
import org.springframework.data.jpa.domain.support.AuditingEntityListener
import ru.webshop.backend.enums.Roles

@Entity
@EntityListeners(AuditingEntityListener::class)
@Table(name = "role")
data class Role(
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    val id: Long,

    @Column(name = "role_name")
    val roleName: String,

    @Column(name = "description")
    val description: String,

    // Связи

        // Роли

        @ManyToMany(fetch = FetchType.LAZY, cascade = [CascadeType.ALL], mappedBy = "roles")
        @JsonIgnore
        private var users: MutableList<User> = mutableListOf(),
)

package ru.webshop.backend.entity

import jakarta.persistence.*
import org.springframework.data.annotation.CreatedDate
import org.springframework.data.jpa.domain.support.AuditingEntityListener
import ru.webshop.backend.enums.TokenType
import java.time.Instant
import java.time.LocalDateTime

@Entity
@EntityListeners(AuditingEntityListener::class)
@Table(name = "token")
data class Token (
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    val id: Long = 0,

    @Column(unique = true)
    private var token: String,

    @Column(name = "token_type", nullable = false)
    var tokenType: TokenType,

    @Column(nullable = false)
    var revoked: Boolean,

    @Column(nullable = false)
    var expired: Boolean,

    @CreatedDate
    @Column(name = "created_at", nullable = false, updatable = false)
    val createdAt: Instant = Instant.now(),

    // Связи

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "user_id")
    var user: User
)

package ru.webshop.backend.entity

import jakarta.persistence.*
import org.springframework.data.annotation.CreatedDate
import org.springframework.data.annotation.LastModifiedDate
import org.springframework.data.jpa.domain.support.AuditingEntityListener
import org.springframework.security.core.GrantedAuthority
import org.springframework.security.core.authority.SimpleGrantedAuthority
import org.springframework.security.core.userdetails.UserDetails
import java.security.Principal
import java.time.Instant
import java.time.LocalDateTime

@Entity
@Table(
    name = "_user",
    indexes = [
        Index(name = "idx_telegram_id", columnList = "telegram_id")
    ])
@EntityListeners(AuditingEntityListener::class)
data class User (
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    val id: Long = 0,

    @Column(name = "username_telegram", length = 64, nullable = true, unique = true)
    var usernameTelegram: String = "",

    @Column(name = "telegram_id", nullable = false, unique = true)
    val telegramId: Long,

    @Column(name = "chat_id", nullable = false, unique = true)
    val chatId: Long,

    @Column(name = "phone_number", nullable = true, unique = true)
    val phoneNumber: String? = null,

    @Column(name = "first_name", nullable = true, unique = true)
    val firstName: String? = null,

    @Column(name = "last_name", nullable = true, unique = true)
    val lastName: String? = null,

    @Column(name = "email", nullable = true, unique = true)
    val email: String? = null,

    @Column(name = "address", nullable = true)
    val address: String? = null,

    @Column(nullable = false)
    var enabled: Boolean,

    @Column(nullable = false)
    private var accountLocked: Boolean,

    @CreatedDate
    @Column(name = "created_at", nullable = false, updatable = false)
    val createdAt: Instant = Instant.now(),

    @LastModifiedDate
    @Column(name = "updated_at")
    private var updatedAt: LocalDateTime? = null,

    // Связи

        // Роли

        @ManyToMany(fetch = FetchType.LAZY, cascade = [CascadeType.ALL])
        var roles: MutableSet<Role> = mutableSetOf(),

    @OneToMany(mappedBy = "_user")
    val orders: List<Order> = mutableListOf(),

    @OneToMany(mappedBy = "_user")
    val reviews: List<Review> = mutableListOf(),

    @OneToOne(mappedBy = "_user", fetch = FetchType.LAZY)
    val cart: Cart? = null,

    @OneToOne(mappedBy = "_user", fetch = FetchType.LAZY)
    val wishList: WishList? = null,

    // Токены

    @OneToMany(mappedBy = "_user", fetch = FetchType.EAGER, cascade = [CascadeType.ALL], orphanRemoval = true)
    val tokens: MutableSet<Token> = mutableSetOf(),

): UserDetails, Principal{
    override fun getAuthorities(): MutableCollection<out GrantedAuthority> = roles.map { SimpleGrantedAuthority(it.roleName) }.toMutableSet()

    override fun isEnabled(): Boolean = enabled

    override fun isCredentialsNonExpired(): Boolean = true

    override fun isAccountNonExpired(): Boolean = true

    override fun isAccountNonLocked(): Boolean = !accountLocked

    override fun getPassword(): String = ""

    override fun getUsername(): String = telegramId.toString()

    override fun getName(): String = telegramId.toString()
}

package ru.webshop.backend.filters

import org.springframework.stereotype.Component
import org.springframework.web.filter.OncePerRequestFilter
import ru.webshop.backend.security.TelegramUserPrincipal
import jakarta.servlet.FilterChain
import jakarta.servlet.http.HttpServletRequest
import jakarta.servlet.http.HttpServletRequestWrapper
import jakarta.servlet.http.HttpServletResponse
import org.springframework.security.core.context.SecurityContextHolder
import java.util.*

@Component
class TelegramHeaderFilter : OncePerRequestFilter() {

    override fun doFilterInternal(
        request: HttpServletRequest,
        response: HttpServletResponse,
        chain: FilterChain
    ) {
        val authentication = SecurityContextHolder.getContext().authentication
        if (authentication?.principal is TelegramUserPrincipal) {
            val user = authentication.principal as TelegramUserPrincipal
            val wrappedRequest = object : HttpServletRequestWrapper(request) {
                override fun getHeader(name: String) = when (name.lowercase()) {
                    "x-telegram-user-id" -> user.id.toString()
                    else -> super.getHeader(name)
                }

                override fun getHeaders(name: String): Enumeration<String> {
                    return if (name.equals("x-telegram-user-id", ignoreCase = true)) {
                        Collections.enumeration(listOf(user.id.toString()))
                    } else {
                        super.getHeaders(name)
                    }
                }

                override fun getHeaderNames(): Enumeration<String> {
                    val original = super.getHeaderNames().toList()
                    return Collections.enumeration(original + "X-Telegram-User-Id")
                }
            }
            chain.doFilter(wrappedRequest, response)
        } else {
            chain.doFilter(request, response)
        }
    }
}

package ru.webshop.backend.repository

import org.springframework.data.jpa.repository.JpaRepository
import org.springframework.data.jpa.repository.Query
import ru.webshop.backend.entity.Token

interface TokenRepository : JpaRepository<Token, Long> {
    @Query(
        value = """
        select t from Token t
        where t.user.email = :email and t.expired = false and t.revoked = false
        """
    )
    fun findAllValidTokenByUserEmail (email: String):Set<Token>

    @Query(
        value = """
        select t from Token t inner join User u
        on t.user.id = u.id
        where u.id = :id and t.expired = false and t.revoked = false
        """
    )
    fun findAllValidTokenByUser (id: Long):Set<Token>

    @Query("SELECT t FROM Token t " +
            "WHERE t.user.id = :userId AND t.expired = false AND t.revoked = false AND t.tokenType = 'REFRESH'")
    fun findValidRefreshTokensByUser(userId: Long): Set<Token>

    fun findByToken (token: String): Token?
}

package ru.webshop.backend.repository

import org.springframework.data.jpa.repository.EntityGraph
import org.springframework.data.jpa.repository.JpaRepository
import ru.webshop.backend.entity.User

interface UserRepository: JpaRepository<User, Long> {
    @EntityGraph(attributePaths = ["roles"])
    fun findByUsername(username: String): User?

    @EntityGraph(attributePaths = ["roles"])
    fun findByTelegramId(telegramId: Long): User?

    @EntityGraph(attributePaths = ["roles"])
    fun existsByTelegramId(telegramId: Long): Boolean
}

package ru.webshop.backend.security

import io.jsonwebtoken.io.IOException
import jakarta.servlet.FilterChain
import jakarta.servlet.ServletException
import jakarta.servlet.http.HttpServletRequest
import jakarta.servlet.http.HttpServletResponse
import org.springframework.http.HttpHeaders
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken
import org.springframework.security.core.context.SecurityContextHolder
import org.springframework.security.core.userdetails.UserDetails
import org.springframework.security.core.userdetails.UserDetailsService
import org.springframework.security.web.authentication.WebAuthenticationDetailsSource
import org.springframework.stereotype.Service
import org.springframework.web.filter.OncePerRequestFilter
import ru.webshop.backend.repository.TokenRepository
import ru.webshop.backend.service.JwtService

@Service
class JwtFilter(
    private val jwtService: JwtService,
    private val userDetailsService: UserDetailsService,
    private val tokenRepository: TokenRepository
): OncePerRequestFilter() {
    @Throws(ServletException::class, IOException::class)
    override fun doFilterInternal(
        request: HttpServletRequest,
        response: HttpServletResponse,
        filterChain: FilterChain
    ) {
        if (request.servletPath.contains("/api/auth")) {
            filterChain.doFilter(request, response)
            return
        }
        val authHeader = request.getHeader(HttpHeaders.AUTHORIZATION)
        if (authHeader == null || !authHeader.startsWith("Bearer ")) {
            filterChain.doFilter(request, response)
            return
        }
        val jwt = authHeader.substring("Bearer ".length)
        val telegramId = jwtService.extractTelegramId(jwt)

        // Добавлена проверка что token живет и что не исключен
        val token = tokenRepository.findByToken(jwt)
        val isTokenValid = token?.let { !it.expired && !it.revoked } ?: false

        if (telegramId != null &&
            SecurityContextHolder.getContext().authentication == null) {

            val userDetails: UserDetails = userDetailsService.loadUserByUsername(telegramId)
            if (jwtService.isTokenValid(jwt, userDetails) && isTokenValid) {
                val authToken = UsernamePasswordAuthenticationToken(
                    userDetails,
                    null,
                    userDetails.authorities)
                authToken.details = WebAuthenticationDetailsSource()
                    .buildDetails(request)
                SecurityContextHolder.getContext().authentication = authToken
            }
        }
        filterChain.doFilter(request, response)
    }

}

package ru.webshop.backend.security

import org.springframework.security.authentication.AbstractAuthenticationToken
import org.springframework.security.core.GrantedAuthority


class TelegramAuthentication(
    private val principal: TelegramUserPrincipal
) : AbstractAuthenticationToken(emptyList<GrantedAuthority>()) {
    override fun getCredentials() = ""
    override fun getPrincipal() = principal
    override fun isAuthenticated() = true
}

package ru.webshop.backend.security

import org.springframework.security.core.GrantedAuthority
import org.springframework.security.core.userdetails.UserDetails
import java.security.Principal
import java.time.Instant

data class TelegramUserPrincipal(
    val id: Long,
    val authDate: Instant,
    val userJson: String,
    val username: String?,
    val authorities: Collection<GrantedAuthority>
) : UserDetails, Principal {
    override fun getAuthorities() = authorities
    override fun getPassword() = ""
    override fun getUsername() = id.toString()
    override fun isAccountNonExpired() = true
    override fun isAccountNonLocked() = true
    override fun isCredentialsNonExpired() = true
    override fun isEnabled() = true
    override fun getName() = id.toString()
}

package ru.webshop.backend.security

import jakarta.transaction.Transactional
import org.springframework.security.core.userdetails.UserDetails
import org.springframework.security.core.userdetails.UserDetailsService
import org.springframework.security.core.userdetails.UsernameNotFoundException
import org.springframework.stereotype.Service
import ru.webshop.backend.repository.UserRepository

@Service
class UserDetailServiceImpl(
    private val userRepository: UserRepository
): UserDetailsService {

    @Transactional
    @Throws(UsernameNotFoundException::class)
    override fun loadUserByUsername(telegramId: String): UserDetails {
        val lltelegramId = telegramId.toLong()
        val user = userRepository.findByTelegramId(lltelegramId)
            ?: throw UsernameNotFoundException("User with email $telegramId not found")
        return user
    }
}

package ru.webshop.backend.service.impl

import com.fasterxml.jackson.databind.ObjectMapper
import com.fasterxml.jackson.databind.PropertyNamingStrategies
import jakarta.servlet.http.HttpServletResponse
import org.springframework.security.authentication.AuthenticationManager
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken
import org.springframework.security.core.userdetails.UsernameNotFoundException
import org.springframework.stereotype.Service
import ru.webshop.backend.config.JwtConfig
import ru.webshop.backend.dto.AuthResponseDTO
import ru.webshop.backend.entity.User
import ru.webshop.backend.enums.CookieName
import ru.webshop.backend.service.JwtService
import ru.webshop.backend.service.interfaces.AuthenticationService
import ru.webshop.backend.service.interfaces.TokenService
import ru.webshop.backend.service.interfaces.UserService
import ru.webshop.backend.utils.TelegramCodeUtils
import java.time.LocalDateTime

@Service
class AuthenticationServiceImpl(
    private val objectMapper: ObjectMapper = ObjectMapper().apply {
        propertyNamingStrategy = PropertyNamingStrategies.SNAKE_CASE
    },
    private val authenticationManager: AuthenticationManager,
    private val userService: UserService,
    private val jwtService: JwtService,
    private val tokenService: TokenService,
    private val jwtConfig: JwtConfig,
    private val telegramCodeUtils: TelegramCodeUtils,
) : AuthenticationService {
    override fun authenticate(webAppInitData: String, response: HttpServletResponse): AuthResponseDTO {
        val secretKey = telegramCodeUtils.generateSecretKey()
        val params = telegramCodeUtils.parseQueryString(webAppInitData)
        val userData = params["user"] ?: throw IllegalArgumentException("User data missing")
        val hash = params["hash"] ?: throw IllegalArgumentException("Hash missing")

        if (telegramCodeUtils.validateTelegramAuth(secretKey, params, hash)) {
            val userCurrent = objectMapper.readValue(userData, UserData::class.java)

            val user = parseUserData(userData)
            val authUser = authenticateUser(user)

            return generateTokens(authUser, response)

        } else {
            throw SecurityException("Invalid Telegram authentication")
        }
    }

    private fun authenticateUser(userData: TelegramUser): User {
        val existingUser = userService.findByTelegramId(userData.id)
        val user = existingUser ?: userService.createUser(
            telegramId = userData.id,
            chatId = userData.id,
            username = userData.username
        )

        val authentication = authenticationManager.authenticate(
            UsernamePasswordAuthenticationToken(user.telegramId.toString(), null)
        )
        return authentication.principal as User
    }
    private fun generateTokens(user: User, response: HttpServletResponse): AuthResponseDTO {
        val accessToken = jwtService.generateAccessToken(user)
        val refreshToken = jwtService.generateRefreshToken(user)

        response.addCookie(jwtService.createHttpOnlyCookie(CookieName.ACCESS_TOKEN.name, accessToken))
        response.addCookie(jwtService.createHttpOnlyCookie(CookieName.REFRESH_TOKEN.name, refreshToken))

        tokenService.saveRefreshToken(user, refreshToken)

        return AuthResponseDTO(
            accessToken = accessToken,
            refreshToken = refreshToken,
            accessExpiresAt = LocalDateTime.now().plusSeconds(jwtConfig.expiration),
            refreshExpiresAt = LocalDateTime.now().plusSeconds(jwtConfig.refreshExpiration)
        )
    }

    private fun parseUserData(userJson: String): TelegramUser {
        return objectMapper.readValue(userJson, TelegramUser::class.java)
    }

    private data class TelegramUser(
        val id: Long,
        val username: String?,
        val first_name: String?,
        val last_name: String?
    )
}

package ru.webshop.backend.service.impl

import jakarta.servlet.http.HttpServletResponse
import org.springframework.stereotype.Service
import ru.dating.authservice.exception.GlobalExceptionHandler
import ru.webshop.backend.config.JwtConfig
import ru.webshop.backend.dto.AuthResponseDTO
import ru.webshop.backend.entity.Token
import ru.webshop.backend.entity.User
import ru.webshop.backend.enums.CookieName
import ru.webshop.backend.enums.TokenType
import ru.webshop.backend.repository.TokenRepository
import ru.webshop.backend.service.JwtService
import ru.webshop.backend.service.interfaces.TokenService
import ru.webshop.backend.service.interfaces.UserService
import java.time.LocalDateTime

@Service
class TokenServiceImpl(
    private val tokenRepository: TokenRepository,
    private val userService: UserService,
    private val jwtService: JwtService,
    private val jwtConfig: JwtConfig,
) : TokenService {

    override fun saveRefreshToken(user: User, refreshToken: String) {
        val token = Token(
            user = user,
            token = refreshToken,
            tokenType = TokenType.REFRESH,
            expired = false,
            revoked = false
        )
        tokenRepository.save(token)
    }

    override fun revokeRefreshToken(token: String) {
        val storedToken = tokenRepository.findByToken(token)
        storedToken?.let {
            it.revoked = true
            it.expired = true
            tokenRepository.save(it)
        }
    }

    override fun findRefreshToken(token: String): Token? = tokenRepository.findByToken(token)

    override fun revokeAllRefreshTokens(user: User) {
        val tokens = tokenRepository.findValidRefreshTokensByUser(user.id)
        tokens.forEach {
            it.revoked = true
            it.expired = true
        }
        tokenRepository.saveAll(tokens)
    }

    override fun refreshToken(refreshToken: String, response: HttpServletResponse): AuthResponseDTO {
        if (!jwtService.isRefreshTokenValid(refreshToken)) {
            throw GlobalExceptionHandler.InvalidTokenException("Invalid or expired refresh token")
        }

        val userTelegramId: String = jwtService.extractTelegramId(refreshToken) // Поменять на TG ID
            ?: throw GlobalExceptionHandler.InvalidTokenException("Invalid refresh token")

        val user: User = userService.findByTelegramId(userTelegramId.toLong()) // Поменять на TG ID
            ?: throw GlobalExceptionHandler.InvalidTokenException("User not found")

        revokeRefreshToken(refreshToken)
        val newRefreshToken: String = jwtService.generateRefreshToken(user)
        saveRefreshToken(user, newRefreshToken)

        val newAccessToken: String = jwtService.generateAccessToken(user)

        response.addCookie(jwtService.createHttpOnlyCookie(CookieName.ACCESS_TOKEN.name, newAccessToken))
        response.addCookie(jwtService.createHttpOnlyCookie(CookieName.REFRESH_TOKEN.name, newRefreshToken))

        return AuthResponseDTO(
            accessToken = newAccessToken,
            issuedAt = LocalDateTime.now(),
            accessExpiresAt = LocalDateTime.now().plusSeconds(jwtConfig.expiration),
            refreshToken = newRefreshToken,
            refreshExpiresAt = LocalDateTime.now().plusSeconds(jwtConfig.refreshExpiration)
        )
    }
}

package ru.webshop.backend.service.impl

data class UserData(val id: Long)

package ru.webshop.backend.service

import io.jsonwebtoken.Claims
import io.jsonwebtoken.Jwts
import io.jsonwebtoken.io.Decoders
import io.jsonwebtoken.security.Keys
import jakarta.servlet.http.Cookie
import org.springframework.security.core.userdetails.UserDetails
import org.springframework.stereotype.Service
import ru.webshop.backend.config.JwtConfig
import ru.webshop.backend.entity.User
import java.time.Instant
import java.time.LocalDateTime
import java.time.ZoneId
import java.util.*
import javax.crypto.SecretKey

@Service
class JwtService(private val jwtConfig: JwtConfig) {

    fun getSignInKey(): SecretKey {
        val keyBytes = Decoders.BASE64.decode(jwtConfig.secretKey)
        return Keys.hmacShaKeyFor(keyBytes)
    }

    fun extractTelegramId(token: String): String? = extractClaim(token) { claims: Claims -> claims.subject }

    fun <T> extractClaim(token: String, claimsResolver: (Claims) -> T): T {
        val claims = extractAllClaims(token)
        return claimsResolver.invoke(claims)
    }

    fun extractAllClaims(token: String): Claims =
        Jwts.parser()
            .verifyWith(getSignInKey())
            .build()
            .parseSignedClaims(token)
            .payload

    private fun buildToken(
        extraClaims: Map<String, Any>,
        userDetails: UserDetails,
        jwtExpiration: Long
    ): String {
        val now = Instant.now()
        return Jwts.builder()
            .claims(extraClaims)
            .subject(userDetails.getUsername()) // Тонкий момент здесь это telegramId
            .issuedAt(Date.from(now))
            .expiration(Date.from(now.plusSeconds(jwtExpiration)))
            .signWith(getSignInKey())
            .compact()
    }

    fun isTokenValid(token: String, userDetails: UserDetails): Boolean {
        val telegramId: String? = extractTelegramId(token)
        return telegramId != null &&
                telegramId == userDetails.getUsername() &&
                !isTokenExpired(token)
    }

    fun createHttpOnlyCookie(name: String, value: String): Cookie {
        val cookie = Cookie(name, value)
        cookie.isHttpOnly = true
        cookie.maxAge = jwtConfig.expiration.toInt()
        cookie.path = "/"
        return cookie
    }

    private fun isTokenExpired(token: String): Boolean = extractExpiration(token).before(Date.from(Instant.now()))

    fun extractExpiration(token: String): Date = extractClaim(token, Claims::getExpiration)

    fun generateAccessToken(user: UserDetails): String {
        val userEntity = user as User
        val claims = ("telegram_id" to userEntity.telegramId).let {
            mapOf<String, Any>(
                "roles" to user.authorities.map { it.authority },
                "token_type" to "ACCESS",
                "sub" to userEntity.telegramId.toString()
            )
        }
        return buildToken(claims, user, jwtConfig.expiration)
    }

    fun generateRefreshToken(user: UserDetails): String {
        val claims = mapOf("type" to "refresh")
        return buildToken(claims, user, jwtConfig.refreshExpiration)
    }
    fun isRefreshTokenValid(token: String): Boolean {
        val claims = extractAllClaims(token)
        return claims["type"] == "refresh" && !isTokenExpired(token)
    }

    /////////////////////////////////////////////
    fun extractExpirationLocalDateTime(token: String): LocalDateTime? {
        return try {
            val expirationDate = extractExpiration(token)
            expirationDate.toInstant()
                .atZone(ZoneId.systemDefault())
                .toLocalDateTime()
        } catch (e: Exception) {
            null
        }
    }
}
package ru.webshop.backend.service

import jakarta.transaction.Transactional
import org.springframework.stereotype.Service
import ru.webshop.backend.entity.User
import ru.webshop.backend.repository.UserRepository
import ru.webshop.backend.service.interfaces.UserService

@Service
@Transactional
class UserServiceImpl(
    private val userRepository: UserRepository
) : UserService {

    override fun createUser(telegramId: Long, chatId: Long, username: String?): User {

        if (userRepository.existsByTelegramId(telegramId)) {
            throw IllegalArgumentException("User with telegramId $telegramId already exists")
        }

        val user = User(
            telegramId = telegramId,
            chatId = chatId,
            enabled = true,
            accountLocked = false,
        )

        return userRepository.save(user)
    }

    override fun findByTelegramId(telegramId: Long): User? {
        return userRepository.findByTelegramId(telegramId)
    }

    override fun existsByTelegramId(telegramId: Long): Boolean {
        return userRepository.existsByTelegramId(telegramId)
    }
}

package ru.webshop.backend.utils

import org.springframework.beans.factory.annotation.Value
import org.springframework.stereotype.Component
import java.net.URLDecoder
import java.nio.charset.StandardCharsets
import javax.crypto.Mac
import javax.crypto.spec.SecretKeySpec

@Component
class TelegramCodeUtils(
    @Value("\${telegram.bot.token}")
    private val botToken: String,
) {

    fun generateSecretKey(): ByteArray {
        val hmac = Mac.getInstance("HmacSHA256")
        hmac.init(SecretKeySpec("WebAppData".toByteArray(StandardCharsets.UTF_8), "HmacSHA256"))
        return hmac.doFinal(botToken.toByteArray(StandardCharsets.UTF_8))
    }

    fun validateTelegramAuth(secretKey : ByteArray, paramMap: Map<String, String>, receivedHash: String): Boolean {
        val dataCheckString = paramMap.entries
            .filter { it.key != "hash" }
            .sortedBy { it.key }
            .joinToString("\n") { "${it.key}=${it.value}" }

        val hmac = Mac.getInstance("HmacSHA256").apply {
            init(SecretKeySpec(secretKey, "HmacSHA256"))
        }
        val calculatedHash = bytesToHex(hmac.doFinal(dataCheckString.toByteArray(StandardCharsets.UTF_8)))
        return calculatedHash.equals(receivedHash, ignoreCase = true)
    }

    fun parseQueryString(queryString: String): Map<String, String> {
        return queryString.split("&").associate {
            val (key, value) = it.split("=", limit = 2)
            URLDecoder.decode(key, StandardCharsets.UTF_8) to
                    URLDecoder.decode(value, StandardCharsets.UTF_8)
        }
    }

    private fun bytesToHex(bytes: ByteArray): String {
        return bytes.joinToString("") { "%02x".format(it) }
    }
}
```
```
server:
  port: 8080

spring:
  application:
    name: backend
  public-urls:
    - "/api/auth/**"
    - "/api/password/**"
    - "/api/token/**"
    - "/api/activate-account"
    - "/v3/api-docs/**"
    - "/swagger-ui.html"
    - "/swagger-ui/**"
    - "/swagger-resources/**"
    - "/webjars/**"
    - "/v2/api-docs"
    - "/v2/api-docs/**"
    - "/webjars/swagger-ui/**"
    - "/v3/api-docs"
    - "/swagger-ui/index.html"
  datasource:
    driver-class-name: org.postgresql.Driver
    url: jdbc:postgresql://localhost:5432/users_db
    #url: jdbc:postgresql://auth_db/auth_db
    username: postgres
    password: postgres
  security:
    jwt:
      secret-key: b5f59337a612a2a7dc07328f3e7d1a04722967c7f06df20a499a7d3f91ff2a7e
      expiration: 3600
      refresh-expiration: 604800
  jpa:
    hibernate:
      ddl-auto: create
    show-sql: true
    properties:
      hibernate:
        format_sql: true
    database: postgresql

telegram:
  bot:
    token: 7543101157:AAESvq4Mu3IHx-2gtkj4xJwktoohT9RbWqE
```
```
plugins {
    kotlin("jvm") version "1.9.25"
    kotlin("plugin.spring") version "1.9.25"
    id("org.springframework.boot") version "3.4.3"
    id("io.spring.dependency-management") version "1.1.7"
    kotlin("plugin.jpa") version "1.9.25"
}

group = "ru.webshop"
version = "0.0.1-SNAPSHOT"

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation ("org.springframework.session:spring-session-core")

    implementation("org.springframework.boot:spring-boot-starter-data-jpa")
    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation("org.springframework.boot:spring-boot-starter-security")

    implementation("com.fasterxml.jackson.module:jackson-module-kotlin")
    implementation("org.jetbrains.kotlin:kotlin-reflect")

    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
    implementation("org.springframework.boot:spring-boot-starter-validation")
    implementation ("org.springframework.boot:spring-boot-configuration-processor")

    implementation("io.jsonwebtoken:jjwt-api:0.12.6")
    implementation("io.jsonwebtoken:jjwt-impl:0.12.6")
    implementation("io.jsonwebtoken:jjwt-jackson:0.12.6")

    runtimeOnly("org.postgresql:postgresql")
}

kotlin {
    compilerOptions {
        freeCompilerArgs.addAll("-Xjsr305=strict")
    }
}

allOpen {
    annotation("jakarta.persistence.Entity")
    annotation("jakarta.persistence.MappedSuperclass")
    annotation("jakarta.persistence.Embeddable")
}

tasks.withType<Test> {
    useJUnitPlatform()
}
```
