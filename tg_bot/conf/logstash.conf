input {
  jdbc {
    jdbc_driver_library => "/usr/share/logstash/postgresql-42.6.0.jar"
    jdbc_driver_class => "org.postgresql.Driver"
    jdbc_connection_string => "jdbc:postgresql://host.docker.internal:5432/goods_db"
    jdbc_user => "postgres"
    jdbc_password => "postgres"
    schedule => "*/1 * * * *" # Запуск каждую минуту
    statement => "
            SELECT
                p.id, p.product_name, p.product_price, p.balance_in_stock, p.article_number, p.rating, p.description,
                p.number_of_orders, p.total_reviews,
                c.id as category_id, c.category_name,
                 CAST(json_agg(DISTINCT jsonb_build_object('id', v.id, 'value', v.value)) FILTER (WHERE v.id IS NOT NULL) AS TEXT) AS values,
                 CAST(json_agg(DISTINCT jsonb_build_object(
                            'id', pp.id,
                            'indexNumber', pp.index_number,
                            'photo_id', ph.id,
                            'photo_url', ph.photo_url,
                            'created_at', ph.created_at
                          )) FILTER (WHERE pp.id IS NOT NULL) AS TEXT) AS photos,
                 CAST(json_agg(DISTINCT jsonb_build_object(
                            'id', r.id,
                            'rating', r.rating,
                            'review_text', r.review_text,
                            'created_at', r.created_at,
                            'user_id', r._user_id
                          )) FILTER (WHERE r.id IS NOT NULL) AS TEXT) AS reviews
            FROM product p
            LEFT JOIN category c ON p.category_id = c.id
            LEFT JOIN photo_product pp ON p.id = pp.product_id
            LEFT JOIN photo ph ON pp.photo_id = ph.id
            LEFT JOIN value v ON p.id = v.product_id
            LEFT JOIN review r ON p.id = r.product_id
            GROUP BY p.id, c.id;
    "
  }
}


filter {
  mutate {
    rename => { "product_name" => "name" }
    rename => { "product_price" => "price" }
    rename => { "balance_in_stock" => "balanceInStock" }
    rename => { "article_number" => "articleNumber" }
    rename => { "category_name" => "category" }
    rename => { "number_of_orders" => "numberOfOrders" }
    rename => { "total_reviews" => "totalReviews" }

    # Convert JSON strings to actual JSON objects
    gsub => [
      "photos", "^\"", "",
      "photos", "\"$", "",
      "values", "^\"", "",
      "values", "\"$", "",
      "reviews", "^\"", "",
      "reviews", "\"$", ""
    ]
  }

  json {
    source => "photos"
    target => "photos"
  }

  json {
    source => "values"
    target => "values"
  }

  json {
    source => "reviews"
    target => "reviews"
  }

  mutate {
    remove_field => ["@version", "@timestamp"]
  }
}

output {
  elasticsearch {
    hosts => ["http://odfe-node:9200"]
    user => "elastic"
    password => "elastic_password"
    index => "products"
    document_id => "%{id}"
  }
  stdout {
    codec => "json_lines"
  }
}